/*
 * Copyright (C) 2014 Vlad Mihalachi
 *
 * This file is part of Turbo Editor.
 *
 * Turbo Editor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Turbo Editor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    defaultConfig {
        applicationId "com.maskyn.fileeditorpro"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 47
        versionName "1.19"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            Properties localProps = new Properties()
            localProps.load(new FileInputStream(file('../local.properties')))
            Properties keyProps = new Properties()
            assert localProps['keystore.props.file']
            keyProps.load(new FileInputStream(file(localProps['keystore.props.file'])))
            storeFile file(keyProps["storeFile"])
            keyAlias keyProps["alias"]
            storePassword keyProps["storePass"]
            keyPassword keyProps["pass"]
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    implementation project(':shared')
    debugImplementation project(':shared')
    releaseImplementation project(':shared')

    implementation "androidx.core:core-ktx:1.1.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    androidTestImplementation 'androidx.test:core:1.3.0-beta02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'org.hamcrest:hamcrest-integration:1.3'
}

task incrementVersionCode {
    doLast {
        println(":incrementVersionCode - Incrementing Version Code...")
        def buildGradleFile = file("build.gradle")
        def patternVersionCode = Pattern.compile("versionCode (\\d+)")
        def buildGradleFileText = buildGradleFile.getText()
        def matcherVersionCode = patternVersionCode.matcher(buildGradleFileText)
        matcherVersionCode.find()
        def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
        def mNextVersionCode = mVersionCode + 1
        def manifestContent = matcherVersionCode.replaceAll("versionCode " + mNextVersionCode)
        println(":incrementVersionCode - current versionCode=" + mVersionCode);
        println(":incrementVersionCode - next versionCode=" + mNextVersionCode);
        buildGradleFile.write(manifestContent)
    }
}
repositories {
    mavenCentral()
}


task jacocoTestReport(type: JacocoReport, dependsOn: "createDebugCoverageReport") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports."

    reports {
        xml.enabled = false
        html.enabled = true
    }

    def classFilter = ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/*Test*.*',
                       'android/**/*.*']

    classDirectories = files(["${project.buildDir}/intermediates/javac/debug/classes", "${project(":shared").buildDir}/intermediates/javac/debug/classes/shared"])

    sourceDirectories = files(["${project.projectDir}/src/main/java", "${project(":shared").projectDir}/src/main/java/shared"])
    executionData = fileTree(dir: "${project.buildDir}", includes: ["**/*.ec"])

    afterEvaluate {
        classDirectories = files( classDirectories.files.collect {
            fileTree(dir: it, exclude: classFilter)
        })
    }
}


task jacocoTestReportEC(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports."

    reports {
        xml.enabled = false
        html.enabled = true
    }

    def classFilter = ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/*Test*.*',
                       'android/**/*.*']

    classDirectories = files(["${project.buildDir}/intermediates/javac/debug/classes", "${project(":shared").buildDir}/intermediates/javac/debug/classes/shared"])

    sourceDirectories = files(["${project.projectDir}/src/main/java", "${project(":shared").projectDir}/src/main/java/shared"])
    executionData = fileTree(dir: "${project.buildDir}", includes: ["**/*.ec"])

    afterEvaluate {
        classDirectories = files( classDirectories.files.collect {
            fileTree(dir: it, exclude: classFilter)
        })
    }
}